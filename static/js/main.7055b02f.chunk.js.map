{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BinBlock","props","bits","onChange","value","bitmaskFromValue","val","toString","padStart","split","reverse","map","b","data","className","range","_","index","active","key","filter","Boolean","join","onClick","bit","mask","nextBit","splice","reduce","prev","curr","idx","Math","pow","flipNthBit","title","ordinal","num","App","React","useState","rows","setRows","Array","x","values","setValues","useEffect","vals","length","_val","String","fromCharCode","newVal","next","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAiDA,SAASA,EAASC,GAAQ,IAAD,EACeA,EAA9BC,YADe,MACR,EADQ,EACLC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACtBC,EAAmB,SAAAC,GAAG,OAC1BA,EACGC,SAAS,GACTC,SAASN,EAAM,KACfO,MAAM,IACNC,UACAC,KAAI,SAAAC,GAAC,MAAU,MAANA,MAYRC,EAAOR,EAAiBD,GAE9B,OACE,yBAAKU,UAAU,YACZC,IAAMb,GAAMS,KAAI,SAACK,EAAGC,GACnB,IAAMC,EAASL,EAAKI,GACpB,OACE,4BACEE,IAAKF,EACLH,UAAW,CAAC,QAASI,EAAS,SAAW,MACtCE,OAAOC,SACPC,KAAK,KACRC,QAAS,WACPpB,EAvBO,SAACC,EAAOoB,GACzB,IAAMC,EAAOpB,EAAiBD,GACxBsB,GAAWD,EAAKD,GAMtB,OALAC,EAAKE,OAAOH,EAAK,EAAGE,GACHD,EAAKG,QAAO,SAACC,EAAMC,EAAMC,GACxC,OAAOF,GAAQC,EAAOE,KAAKC,IAAI,EAAGF,GAAO,KACxC,GAiBgBG,CAAW9B,EAAOa,KAE7BkB,MAAK,mBAAcC,EAAQnB,EAAM,GAA5B,gBAAsCC,EAAS,MAAQ,YAQxE,IAAMkB,EAAU,SAAAC,GACd,OAAOA,GACL,KAAK,EACH,MAAO,MACT,KAAK,EACH,MAAO,MACT,KAAK,EACL,MAAO,MACP,QACE,MAAM,GAAN,OAAUA,EAAV,QAISC,EArGf,WAAgB,IAAD,EACWC,IAAMC,SAAS,GAD1B,mBACNC,EADM,KACAC,EADA,OAEeH,IAAMC,SAASG,MAAMF,GAAM9B,KAAI,SAAAiC,GAAC,OAAI,MAFnD,mBAENC,EAFM,KAEEC,EAFF,KAUb,OAPAP,IAAMQ,WAAU,WACdD,GAAU,SAAAE,GAGR,OAFAA,EAAKC,OAASR,EACdO,EAAKrC,KAAI,SAAAiC,GAAC,OAAKA,GAAQ,KAChBI,OAER,CAACP,IAEF,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,WACb,4BAAQS,QAAS,kBAAMmB,GAAQ,SAAAD,GAAI,OAAIA,EAAO,OAA9C,KADF,QACoE,IAClE,4BAAQlB,QAAS,kBAAMmB,GAAQ,SAAAD,GAAI,OAAIA,EAAO,OAA9C,MAGD1B,IAAM0B,GAAM9B,KAAI,SAACuC,EAAMnB,GACtB,IAAMzB,EAAMuC,EAAOd,IAAQ,EAE3B,OACE,yBAAKjB,UAAU,SAASK,IAAKY,GAC3B,8BAAOzB,EAAM,EAAI6C,OAAOC,aAAa,GAAK9C,GAAO,KAEjD,kBAACN,EAAD,CACEE,KAAM,EACNE,MAAOE,EACPH,SAAU,SAAAkD,GAAM,OACdP,GAAU,SAAAjB,GACR,IAAIyB,EAAI,YAAOzB,GAEf,OADAyB,EAAK3B,OAAOI,EAAK,EAAGsB,GACbC,QAIb,0BAAMxC,UAAU,aAAa,UAAGR,GAAME,SAAS,EAAE,aC5B3Ca,QACW,cAA7BkC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7055b02f.chunk.js","sourcesContent":["import React from \"react\";\nimport range from \"lodash.range\";\nimport \"./App.css\";\n\nfunction App() {\n  const [rows, setRows] = React.useState(5);\n  const [values, setValues] = React.useState(Array(rows).map(x => 0));\n  React.useEffect(() => {\n    setValues(vals => {\n      vals.length = rows;\n      vals.map(x => (x ? x : 0));\n      return vals;\n    });\n  }, [rows]);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"row-row\">\n          <button onClick={() => setRows(rows => rows - 1)}>-</button> rows{\" \"}\n          <button onClick={() => setRows(rows => rows + 1)}>+</button>\n        </div>\n\n        {range(rows).map((_val, idx) => {\n          const val = values[idx] || 0;\n\n          return (\n            <div className=\"bitrow\" key={idx}>\n              <span>{val > 0 ? String.fromCharCode(64 + val) : \"_\"}</span>\n\n              <BinBlock\n                bits={5}\n                value={val}\n                onChange={newVal =>\n                  setValues(prev => {\n                    let next = [...prev];\n                    next.splice(idx, 1, newVal);\n                    return next;\n                  })\n                }\n              />\n              <span className=\"bin-value\">{`${val}`.padStart(2,'0')}</span>\n            </div>\n          );\n        })}\n      </header>\n    </div>\n  );\n}\n\nfunction BinBlock(props) {\n  const { bits = 1, onChange, value } = props;\n  const bitmaskFromValue = val =>\n    val\n      .toString(2)\n      .padStart(bits, \"0\")\n      .split(\"\")\n      .reverse()\n      .map(b => b === \"1\");\n\n  const flipNthBit = (value, bit) => {\n    const mask = bitmaskFromValue(value);\n    const nextBit = !mask[bit];\n    mask.splice(bit, 1, nextBit);\n    const newValue = mask.reduce((prev, curr, idx) => {\n      return prev + (curr ? Math.pow(2, idx) : 0);\n    }, 0);\n\n    return newValue;\n  };\n  const data = bitmaskFromValue(value);\n\n  return (\n    <div className=\"binblock\">\n      {range(bits).map((_, index) => {\n        const active = data[index];\n        return (\n          <button\n            key={index}\n            className={[\"block\", active ? \"active\" : null]\n              .filter(Boolean)\n              .join(\" \")}\n            onClick={() => {\n              onChange(flipNthBit(value, index));\n            }}\n            title={`flip the ${ordinal(index+1)} bit ${active ? 'off' : 'on'}`}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nconst ordinal = num => {\n  switch(num){\n    case 1:\n      return '1st'\n    case 2:\n      return '2nd'\n    case 3: \n    return '3rd'\n    default:\n      return `${num}th`\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}